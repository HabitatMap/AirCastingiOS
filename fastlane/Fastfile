# This file contains the fastlane.tools configuration # You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
   desc "AirCastingApp"
   lane :beta do 
      ensure_git_branch(branch: "develop")
      ensure_git_status_clean
      increment_build_number
      version = get_version_number
      begin
         cocoapods
         add_badge
         build_app(workspace: "AirCasting.xcworkspace", scheme: "AirCasting", export_method: "ad-hoc", silent: "true", output_directory: "./build_ipa", configuration: "Beta")
         firebase_app_distribution(
            app: "1:51291628191:ios:b090a81539b7acbb48b8aa",
            firebase_cli_token: ENV["FIREBASE_TOKEN"],
            groups: "always_testers",
            release_notes: "Beta #{version}"
         )
         upload_symbols_to_crashlytics(dsym_path: "./build_ipa/AirCasting.app.dSYM.zip", 
                                       gsp_path: "./GoogleService-Info.plist", 
                                       app_id: "1:51291628191:ios:b090a81539b7acbb48b8aa", 
                                       api_token: ENV["FIREBASE_TOKEN"])
         clean_build_artifacts
         reset_git_repo(files: "AirCasting/Assets.xcassets/*")
         version = get_version_number
         build = get_build_number
         sh("git checkout -b beta/#{version}b#{build}")
         git_add
         git_commit(path: "", message: "Beta releasae of #{version}b#{build}") 
      rescue => ex
         reset_git_repo(skip_clean: true)
      end
   end

   lane :release_update do
      ensure_git_status_clean
      version = get_version_number
      ensure_git_branch(branch: "release/#{version}")
      increment_build_number
      build = get_build_number
      begin
         test_flight
         build_app(workspace: "AirCasting.xcworkspace", scheme: "AirCasting", export_method: "ad-hoc", silent: "true", output_directory: "./build_ipa", configuration: "Release", export_options: {
            provisioningProfiles: {
               "org.habitatmap.AirCasting": "AirCasting Ad hoc distribution"
            }
         })
         firebase_app_distribution(
            app: "1:51291628191:ios:b090a81539b7acbb48b8aa",
            firebase_cli_token: ENV["FIREBASE_TOKEN"],
            groups: "always_testers",
            release_notes: "Release Candidate #{version} build #{build}"
         )
         download_dsyms(app_identifier: "org.habitatmap.AirCasting", version: version, build_number: build, api_key: get_appstore_api_key)
         upload_symbols_to_crashlytics(gsp_path: "./GoogleService-Info.plist", 
                                       app_id: "1:51291628191:ios:b090a81539b7acbb48b8aa", 
                                       api_token: ENV["FIREBASE_TOKEN"])
         clean_build_artifacts
         sh("git add -A")
         sh("git commit -m \"RC version #{version} build #{build}\"")
         sh("git push -u origin release/#{version}")
      rescue => ex
         reset_git_repo(skip_clean: true)
      end
   end

   lane :release do
      ensure_git_status_clean
      version = get_version_number
      ensure_git_branch(branch: "develop")
      begin
         test_flight
         build_app(workspace: "AirCasting.xcworkspace", scheme: "AirCasting", export_method: "ad-hoc", silent: "true", output_directory: "./build_ipa", configuration: "Release", export_options: {
            provisioningProfiles: {
               "org.habitatmap.AirCasting": "AirCasting Ad hoc distribution"
            }
         })
         firebase_app_distribution(
            app: "1:51291628191:ios:b090a81539b7acbb48b8aa",
            firebase_cli_token: ENV["FIREBASE_TOKEN"],
            groups: "always_testers",
            release_notes: "Release Candidate #{version} build #{build}"
         )
         download_dsyms(app_identifier: "org.habitatmap.AirCasting", version: version, build_number: build, api_key: get_appstore_api_key)
         upload_symbols_to_crashlytics(gsp_path: "./GoogleService-Info.plist", 
                                       app_id: "1:51291628191:ios:b090a81539b7acbb48b8aa", 
                                       api_token: ENV["FIREBASE_TOKEN"])
         clean_build_artifacts
         sh("git checkout -b release/#{version}")
         sh("git push -u origin release/#{version}")
      rescue => ex
         reset_git_repo(skip_clean: true)
      end
   end

   private_lane :test_flight do
      cocoapods
      build_app(workspace: "AirCasting.xcworkspace", scheme: "AirCasting", export_method: "app-store", output_directory: "./build_ipa", configuration: "Release")
      upload_to_testflight(
         api_key: get_appstore_api_key
      )
   end

   private_lane :get_appstore_api_key do
      app_store_connect_api_key(
         key_id: ENV["APPSTORE_KEY_ID"],
         issuer_id: ENV["APPSTORE_ISSUER_ID"],
         key_filepath: "fastlane/AuthKey.p8",
         in_house: false
      )
   end
end
